#! /usr/local/bin/expect
#
# @(!--#) @(#) sshcmds.exp, version 010, 28-september-2023
#
# ssh into a host, run some commands and logout
#

set DEBUG 0

source "ssh.inc"

########################################################################

proc usage {} {
  global progname

  send_error "$progname: usage: $progname \[ -s sudopassword ] \[ -n newuserpass ] -h host -u user -p password -c command_filename\n"

  exit 2
}

########################################################################

#
# Main
#

# get program/script name
set progname [file tail $argv0]

# print usage message if no command line arguments
if {[llength $argv] < 1} {
  usage
}

# set default command line argument values
set hostname ""
set username ""
set password ""
set sudopassword ""
set cmdfilename ""
set newuserpass ""

# process command line options
set argc [llength $argv]
set i 0
while {$i < $argc} {
  set arg [lindex $argv $i]

  if {[string equal $arg "-h"]} {
    incr i
    if {$i >= $argc} {
      send_error "$progname: expecting hostname after \"-h\" argument\n"
      exit 1
    }
    set hostname [lindex $argv $i]
  } elseif {[string equal $arg "-u"]} {
    incr i
    if {$i >= $argc} {
      send_error "$progname: expecting username after \"-u\" argument\n"
      exit 1
    }
    set username [lindex $argv $i]
  } elseif {[string equal $arg "-p"]} {
    incr i
    if {$i >= $argc} {
      send_error "$progname: expecting password after \"-p\" argument\n"
      exit 1
    }
    set password [lindex $argv $i]
  } elseif {[string equal $arg "-s"]} {
    incr i
    if {$i >= $argc} {
      send_error "$progname: expecting sudo password after \"-s\" argument\n"
      exit 1
    }
    set sudopassword [lindex $argv $i]
  } elseif {[string equal $arg "-c"]} {
    incr i
    if {$i >= $argc} {
      send_error "$progname: expecting command filename after \"-c\" argument\n"
      exit 1
    }
    set cmdfilename [lindex $argv $i]
  } elseif {[string equal $arg "-n"]} {
    incr i
    if {$i >= $argc} {
      send_error "$progname: expecting new user password after \"-n\" argument\n"
      exit 1
    }
    set newuserpass [lindex $argv $i]
  } else {
    send_error "$progname: unrecognised command line option/argument \"$arg\"\n"
    usage
  }

  incr i
}

# print out command line arguments
if {$DEBUG != 0} {
  puts "Hostname ............: <$hostname>"
  puts "Username ............: <$username>"
  puts "Password ............: <$password>"
  puts "Command file ........: <$cmdfilename>"
  puts "New user password ...: <$newuserpass>"
}

# ensure a hostname was specified
if {[string equal $hostname ""]} {
  send_error "$progname: no hostname specified\n"
  exit 1
}

# ensure a username was specified
if {[string equal $username ""]} {
  send_error "$progname: no username specified\n"
  exit 1
}

# ensure a password was specified
if {[string equal $password ""]} {
  send_error "$progname: no password specified\n"
  exit 1
}

# ensure a command filename was specified
if {[string equal $cmdfilename ""]} {
  send_error "$progname: no command filename specified\n"
  exit 1
}

# if no sudopassword specified then set it to password
if {[string equal $sudopassword ""]} {
  set sudopassword $password
}

# print out sudo password arguments
if {$DEBUG} {
  puts "Sudo Password ...: <$sudopassword>"
}

# handle environment variable for ssh password
set password [sshpassenv $password "ssh password"]

# handle environment variable for sudo password
set sudopassword [sshpassenv $sudopassword "sudo password"]

# handle environment variable for sudo password
set newuserpass [sshpassenv $newuserpass "new user password"]


# print out password and sudo password arguments again as if they were ENVs the will be looked up now
if {$DEBUG} {
  puts "Password ............: <$password>"
  puts "Sudo Password .......: <$sudopassword>"
  puts "New user password ...: <$newuserpass>"
}

# open the command file
if {[catch {open "$cmdfilename" "r"} cmdfile]} {
  send_error "$progname: cannot open command filename \"$cmdfilename\" for reading\n"
  exit 1
}

# start the ssh command
spawn ssh [set username]@[set hostname]

# login using ssh via source sshlogin procedure
sshlogin $password

# get sudo priviledge via sourced sshsudo procedure
sshsudo $username $sudopassword

# read lines from the command file
while {[gets $cmdfile line] != -1} {
  # trim white space
  set line [string trim $line]

  # continue if a blank line
  if {$line == ""} {
    continue
  }

  # if line starts with a comment character then continue (i.e. skip it)
  if {[string compare [string index $line 0] "#"] == 0} {
    continue
  }

  # send command
  send "$line\r"
  
  # wait for command to complete
  while {1} {
    expect {
      timeout {
        send_error "\n$progname: command timeout\n"
        exit 1
      }
      eof {
        send_error "\n$progname: end of file while running command\n"
        exit 1
      }
      "New password: " {
        if {$newuserpass != ""} {
          send "$newuserpass\r"
        }
      }
      "Retype new password: " {
        if {$newuserpass != ""} {
          send "$newuserpass\r"
        }
      }
      "$ " {
        break
      }
    }
  }
}

# close the ssh connection via sourced sshclose procedure
sshclose

# close the command file
close $cmdfile

# if control gets here then exit success
exit 0
